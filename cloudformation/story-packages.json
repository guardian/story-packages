{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Story packages",
    "Parameters": {
        "GuardianIP": {
            "Description": "Ip range for the office",
            "Type": "String",
            "Default": "77.91.248.0/21"
        },
        "Stage": {
            "Description": "Environment name",
            "Type": "String",
            "AllowedValues": [
                "CODE",
                "PROD"
            ],
            "Default": "PROD"
        },
        "ApplicationName": {
            "Description": "Name of the application",
            "Type": "String",
            "Default": "story-packages"
        },
        "Stack": {
            "Description": "AWS stack hosting the application",
            "Type": "String",
            "Default": "cms-fronts"
        },
        "LogServerRoleToAssume": {
            "Description": "Composer role to assume access to the kinesis log stash stream",
            "Type": "String",
            "Default": "arn:aws:iam::743583969668:role/FrontsRoleForLogStash-FaciaToolRole-GX5KBXQZGL5X"
        },
        "AvailabilityZones": {
            "Description": "The availability zone where instances are allowed to run",
            "Type": "List<AWS::EC2::AvailabilityZone::Name>",
            "Default": "eu-west-1a,eu-west-1b,eu-west-1c"
        },
        "SwitchboardBucket": {
            "Description": "Bucket where switchboard writes switches status",
            "Type": "String",
            "Default": "arn:aws:s3:::facia-switches/*"
        },
        "PandaRoleToAssume": {
            "Description": "Role to access panda bucket",
            "Type": "String",
            "Default": "arn:aws:iam::753338109777:role/Fronts-panda-IAM-FaciaToolRole-NKNXCYEGL0F6"
        }
    },
    "Mappings": {
        "CertificatesMap": {
            "PROD": {
                "CertName": "arn:aws:iam::163592447864:server-certificate/star.gutools.co.uk-exp2018-11-17"
            },
            "CODE": {
                "CertName": "arn:aws:iam::163592447864:server-certificate/sites.code.dev-gutools.co.uk"
            }
        },
        "StageMap": {
            "PROD": {
                "MinSize": 3,
                "MaxSize": 6,
                "DesiredCapacity": 3,
                "InstanceType": "c3.large"
            },
            "CODE": {
                "MinSize": 1,
                "MaxSize": 2,
                "DesiredCapacity": 1,
                "InstanceType": "m3.medium"
            }
        }
    },
    "Resources": {
        "DistributionInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    { "Ref": "DistributionRole" }
                ]
            }
        },
        "DistributionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Resource": [
                                        "arn:aws:s3:::story-packages-dist/*",
                                        "arn:aws:s3:::facia-private/*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "PanDomainPolicy": {
          "Type": "AWS::IAM::Policy",
          "Properties": {
            "PolicyName": "PanDomainPolicy",
            "PolicyDocument": {
                "Statement": [{
                    "Effect": "Allow",
                    "Action": "sts:AssumeRole",
                    "Resource": { "Ref" : "PandaRoleToAssume" }
                }]
            },
            "Roles": [{"Ref": "DistributionRole"}]
          }
        },
        "LogServerPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "LogServerPolicy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": "sts:AssumeRole",
                        "Resource": { "Ref" : "LogServerRoleToAssume" }
                    } ]
                },
                "Roles": [{ "Ref": "DistributionRole" }]
            }
        },
        "SwitchesPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "SwitchesPolicy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": "s3:GetObject",
                        "Resource": { "Ref" : "SwitchboardBucket" }
                    } ]
                },
                "Roles": [{ "Ref": "DistributionRole" }]
            }
        },
        "CloudwatchPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "CloudwatchPolicy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                          "cloudwatch:GetMetricStatistics",
                          "cloudwatch:ListMetrics",
                          "cloudwatch:PutMetricData"
                        ],
                        "Resource": "*"
                    } ]
                },
                "Roles": [{ "Ref": "DistributionRole" }]
            }
        },
        "UpdatesStreamPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "UpdatesStreamPolicy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "kinesis:*"
                        ],
                        "Resource": { "Fn::Join" : [ "", [ "arn:aws:kinesis:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":stream/", { "Ref": "KinesisUpdateStream" } ]]}
                    } ]
                },
                "Roles": [{ "Ref": "DistributionRole" }]
            }
        },
        "ContentAPIStreamPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "ContentAPIStreamPolicy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "kinesis:*"
                        ],
                        "Resource": { "Fn::Join" : [ "", [ "arn:aws:kinesis:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":stream/", { "Ref": "KinesisCAPIStream" } ]]}
                    } ]
                },
                "Roles": [{ "Ref": "DistributionRole" }]
            }
        },
        "StoryPackagesPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "StoryPackagesPolicy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "s3:GetObject",
                            "s3:PutObject",
                            "s3:PutObjectAcl",
                            "s3:ListBucket"
                        ],
                        "Resource": "arn:aws:s3:::story-packages-store/*"
                    } ]
                },
                "Roles": [{ "Ref": "DistributionRole" }]
            }
        },
        "DynamoDBPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "DynamoDBPolicy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "dynamodb:GetItem",
                            "dynamodb:Query",
                            "dynamodb:PutItem",
                            "dynamodb:UpdateItem",
                            "dynamodb:DeleteItem"
                        ],
                        "Resource": { "Fn::Join" : [ "", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "DynamoDBTable" } ]]}
                    } ]
                },
                "Roles": [{ "Ref": "DistributionRole" }]
            }
        },
        "DynamoDBTable": {
            "Type" : "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [{
                    "AttributeName": "id",
                    "AttributeType": "S"
                }, {
                    "AttributeName": "name",
                    "AttributeType": "S"
                }, {
                    "AttributeName": "lastModify",
                    "AttributeType": "N"
                }],
                "KeySchema": [{
                    "AttributeName": "id",
                    "KeyType": "HASH"
                }, {
                    "AttributeName": "name",
                    "KeyType": "RANGE"
                }],
                "GlobalSecondaryIndexes": [{
                    "IndexName": "packageName",
                    "KeySchema": [{
                        "AttributeName": "name",
                        "KeyType": "HASH"
                    }, {
                        "AttributeName": "lastModify",
                        "KeyType": "RANGE"
                    }],
                    "Projection": {
                        "NonKeyAttributes": ["isHidden"],
                        "ProjectionType": "INCLUDE"
                    },
                    "ProvisionedThroughput": {
                        "ReadCapacityUnits": 5,
                        "WriteCapacityUnits": 5
                    }
                }, {
                    "IndexName": "modificationDate",
                    "KeySchema": [{
                        "AttributeName": "id",
                        "KeyType": "HASH"
                    }, {
                        "AttributeName": "lastModify",
                        "KeyType": "RANGE"
                    }],
                    "Projection": {
                        "NonKeyAttributes": ["name", "isHidden"],
                        "ProjectionType": "INCLUDE"
                    },
                    "ProvisionedThroughput": {
                        "ReadCapacityUnits": 5,
                        "WriteCapacityUnits": 5
                    }
                }],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                }
            }
        },
        "SSHSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow SSH access from the office",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "GuardianIP"
                        }
                    }
                ]
            }
        },
        "AppServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Application servers",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 9000,
                        "ToPort": 9000,
                        "CidrIp": { "Ref": "GuardianIP" }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 9000,
                        "ToPort": 9000,
                        "SourceSecurityGroupName": {
                            "Fn::GetAtt": [
                                "ApplicationLoadBalancer",
                                "SourceSecurityGroup.GroupName"
                            ]
                        }
                    }
                ]
            }
        },
        "LoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Story packages application load balancer",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "9080",
                        "ToPort": "9080",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "ApplicationLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "AvailabilityZones": { "Ref": "AvailabilityZones" },
                "CrossZone": true,
                "SecurityGroups": [
                    {
                        "Fn::GetAtt": [
                            "LoadBalancerSecurityGroup",
                            "GroupId"
                        ]
                    }
                ],
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "9000",
                        "Protocol": "HTTP"
                    },
                    {
                        "LoadBalancerPort": "443",
                        "InstancePort": "9000",
                        "Protocol": "HTTPS",
                        "InstanceProtocol": "HTTP",
                        "SSLCertificateId": {
                            "Fn::FindInMap": [
                                "CertificatesMap",
                                { "Ref": "Stage" },
                                "CertName"
                            ]
                        }
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:9000/status",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "10",
                    "Interval": "60",
                    "Timeout": "5"
                },
                "Tags": [
                    {
                        "Key": "Stage",
                        "Value": { "Ref": "Stage" }
                    },
                    {
                        "Key": "Stack",
                        "Value": { "Ref": "Stack" }
                    },
                    {
                        "Key": "App",
                        "Value": { "Ref": "ApplicationName" }
                    }
                ]
            }
        },
        "AutoscalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": { "Ref": "AvailabilityZones" },
                "LaunchConfigurationName": {
                    "Ref": "ApplicationLaunchConfig"
                },
                "MinSize": {
                    "Fn::FindInMap": ["StageMap", { "Ref": "Stage" }, "MinSize" ]
                },
                "MaxSize": {
                    "Fn::FindInMap": ["StageMap", { "Ref": "Stage" }, "MaxSize" ]
                },
                "DesiredCapacity": {
                    "Fn::FindInMap": ["StageMap", { "Ref": "Stage" }, "DesiredCapacity" ]
                },
                "Cooldown": "180",
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": 200,
                "LoadBalancerNames": [
                    {
                        "Ref": "ApplicationLoadBalancer"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Stage",
                        "Value": { "Ref": "Stage" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Stack",
                        "Value": { "Ref": "Stack" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "App",
                        "Value": { "Ref": "ApplicationName" },
                        "PropagateAtLaunch": "true"
                    }

                ]
            }
        },
        "KinesisUpdateStream": {
            "Type": "AWS::Kinesis::Stream",
            "Properties": {
                "ShardCount": 1
            }
        },
        "KinesisCAPIStream": {
            "Type": "AWS::Kinesis::Stream",
            "Properties": {
                "ShardCount": 1
            }
        },
        "ApplicationLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Authentication": {
                    "distributionAuthentication": {
                        "type": "S3",
                        "roleName": {
                            "Ref": "DistributionRole"
                        },
                        "buckets": [
                            "story-packages-dist"
                        ]
                    }
                },
                "AWS::CloudFormation::Init": {
                    "config": {
                        "users": {
                            "story-packages": {
                                "homeDir": "/home/story-packages"
                            }
                        },
                        "files": {
                            "/home/story-packages/story-packages.all.deb": {
                                "source": { "Fn::Join" : ["", [
                                    "https://s3-eu-west-1.amazonaws.com/story-packages-dist/cms-fronts/",
                                    { "Ref": "Stage" },
                                    "/story-packages/story-packages_1.0.0_all.deb"
                                ]]},
                                "authentication": "distributionAuthentication"
                            },
                            "/etc/gu/story-packages.application.secrets.conf": {
                                "source": { "Fn::Join" : ["", [
                                    "https://s3-eu-west-1.amazonaws.com/facia-private/story-packages.application.secrets.conf"
                                ]]},
                                "mode": "000400",
                                "owner": "story-packages",
                                "authentication": "distributionAuthentication"
                            },
                            "/etc/gu/story-packages.properties": {
                                "content": { "Fn::Join" : ["", [
                                    "STAGE=", { "Ref" : "Stage" }, "\n",
                                    "STREAM=", { "Ref" : "KinesisUpdateStream" }, "\n",
                                    "CAPI_STREAM=", { "Ref" : "KinesisCAPIStream" }, "\n",
                                    "TABLE_CONFIG=", { "Ref" : "DynamoDBTable" }, "\n"
                                ]]}
                            }
                        }
                    }
                }
            },
            "Properties": {
                "KeyName": "fronts",
                "ImageId": "ami-ddd87dae",
                "InstanceType": {
                    "Fn::FindInMap": [
                        "StageMap",
                        { "Ref": "Stage" },
                        "InstanceType"
                    ]
                },
                "SecurityGroups": [
                    { "Ref": "AppServerSecurityGroup" },
                    { "Ref": "SSHSecurityGroup" }
                ],
                "IamInstanceProfile": {
                    "Ref": "DistributionInstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -ev\n",
                                "cfn-init -s ",
                                { "Ref": "AWS::StackId" },
                                " -r ApplicationLaunchConfig ",
                                "  --region ",
                                { "Ref": "AWS::Region" },
                                " || error_exit 'Failed to run cfn-init'\n",

                                "dpkg -i /home/story-packages/story-packages.all.deb"
                            ]
                        ]
                    }
                }
            }
        }
    },
    "Outputs": {
        "ApplicationLoadBalancerDNS": {
            "Description": "Load balancer DNS",
            "Value": {
                "Fn::GetAtt": [
                    "ApplicationLoadBalancer",
                    "DNSName"
                ]
            }
        },
        "UpdateStream": {
            "Description": "Kinesis stream with stream updates",
            "Value": {
                "Ref": "KinesisUpdateStream"
            }
        },
        "ContentAPIStream": {
            "Description": "Kinesis stream for content API updates",
            "Value": {
                "Ref": "KinesisCAPIStream"
            }
        },
        "DynamoTable": {
            "Description": "Table name of DynamoDB",
            "Value": {
                "Ref": "DynamoDBTable"
            }
        }
    }
}
