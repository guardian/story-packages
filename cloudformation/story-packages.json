{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Story packages",
    "Parameters": {
        "GuardianIP": {
            "Description": "Ip range for the office",
            "Type": "String",
            "Default": "77.91.248.0/21"
        },
        "Stage": {
            "Description": "Environment name",
            "Type": "String",
            "AllowedValues": [
                "CODE",
                "PROD"
            ],
            "Default": "PROD"
        },
        "ApplicationName": {
            "Description": "Name of the application",
            "Type": "String",
            "Default": "story-packages"
        },
        "Stack": {
            "Description": "AWS stack hosting the application",
            "Type": "String",
            "Default": "cms-fronts"
        },
        "LogServerRoleToAssume": {
            "Description": "Composer role to assume access to the kinesis log stash stream",
            "Type": "String",
            "Default": "arn:aws:iam::743583969668:role/FrontsRoleForLogStash-FaciaToolRole-GX5KBXQZGL5X"
        },
        "AvailabilityZones": {
            "Description": "The availability zone where instances are allowed to run",
            "Type": "List<AWS::EC2::AvailabilityZone::Name>",
            "Default": "eu-west-1a,eu-west-1b,eu-west-1c"
        },
        "SwitchboardBucket": {
            "Description": "Bucket where switchboard writes switches status",
            "Type": "String",
            "Default": "arn:aws:s3:::facia-switches/*"
        },
        "PandaRoleToAssume": {
            "Description": "Role to access panda bucket",
            "Type": "String",
            "Default": "arn:aws:iam::753338109777:role/Fronts-panda-IAM-FaciaToolRole-NKNXCYEGL0F6"
        },
        "ContentAPIAccountId": {
            "Description": "Content API account ID, needed for Assume role",
            "Type": "String"
        },
        "S3BackupBucket": {
            "Description": "Bucket used to backup DynamoDB",
            "Type": "String",
            "Default": "story-packages-backup"
        },
        "CertificateArn": {
            "Description": "ARN of the SSL certificate for this service",
            "Type": "String"
        },
        "MachineImageID": {
            "Description": "ID of the machine image for this service (ami)",
            "Type": "String"
        }
    },
    "Mappings": {
        "StageMap": {
            "PROD": {
                "MinSize": 2,
                "MaxSize": 4,
                "DesiredCapacity": 2,
                "InstanceType": "c4.large",
                "ReadThroughput": 7,
                "WriteThroughput": 7,
                "ReindexReadThroughput": 1,
                "ReindexWriteThroughput": 1
            },
            "CODE": {
                "MinSize": 1,
                "MaxSize": 2,
                "DesiredCapacity": 1,
                "InstanceType": "t2.medium",
                "ReadThroughput": 4,
                "WriteThroughput": 4,
                "ReindexReadThroughput": 1,
                "ReindexWriteThroughput": 1
            }
        },
        "KinesisStreamMap": {
            "PROD": {
                "CAPIStream": "story-packages-PROD-CAPIStreamUpdate",
                "ReindexStream": "story-packages-PROD-ReindexStreamUpdate"
            },
            "CODE": {
                "CAPIStream": "story-packages-CODE-CAPIStreamUpdate",
                "ReindexStream": "story-packages-CODE-ReindexStreamUpdate"
            }
        }
    },
    "Resources": {
        "DistributionInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    { "Ref": "DistributionRole" }
                ]
            }
        },
        "DistributionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Resource": [
                                        "arn:aws:s3:::story-packages-dist/*",
                                        "arn:aws:s3:::facia-private/*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ContentAPIRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "AWS": { "Fn::Join": [ "", [
                                "arn:aws:iam::", { "Ref": "ContentAPIAccountId" }, ":root"
                            ]]}
                        }
                    }]
                }
            }
        },
        "PanDomainPolicy": {
          "Type": "AWS::IAM::Policy",
          "Properties": {
            "PolicyName": "PanDomainPolicy",
            "PolicyDocument": {
                "Statement": [{
                    "Effect": "Allow",
                    "Action": "sts:AssumeRole",
                    "Resource": { "Ref" : "PandaRoleToAssume" }
                }]
            },
            "Roles": [{"Ref": "DistributionRole"}]
          }
        },
        "LogServerPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "LogServerPolicy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": "sts:AssumeRole",
                        "Resource": { "Ref" : "LogServerRoleToAssume" }
                    } ]
                },
                "Roles": [{ "Ref": "DistributionRole" }]
            }
        },
        "SwitchesPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "SwitchesPolicy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": "s3:GetObject",
                        "Resource": { "Ref" : "SwitchboardBucket" }
                    } ]
                },
                "Roles": [{ "Ref": "DistributionRole" }]
            }
        },
        "CloudwatchPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "CloudwatchPolicy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                          "cloudwatch:GetMetricStatistics",
                          "cloudwatch:ListMetrics",
                          "cloudwatch:PutMetricData"
                        ],
                        "Resource": "*"
                    } ]
                },
                "Roles": [{ "Ref": "DistributionRole" }]
            }
        },
        "UpdatesStreamPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "UpdatesStreamPolicy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "kinesis:*"
                        ],
                        "Resource": { "Fn::Join" : [ "", [ "arn:aws:kinesis:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":stream/", { "Ref": "KinesisUpdateStream" } ]]}
                    } ]
                },
                "Roles": [{ "Ref": "DistributionRole" }]
            }
        },
        "ContentAPIStreamPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "ContentAPIStreamPolicy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "kinesis:*"
                        ],
                        "Resource": { "Fn::Join" : [ "", [ "arn:aws:kinesis:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":stream/", {
                            "Fn::FindInMap": [
                                "KinesisStreamMap",
                                { "Ref": "Stage" },
                                "CAPIStream"
                            ]
                        } ]]}
                    }, {
                        "Effect": "Allow",
                        "Action": [
                            "kinesis:*"
                        ],
                        "Resource": { "Fn::Join" : [ "", [ "arn:aws:kinesis:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":stream/", {
                            "Fn::FindInMap": [
                                "KinesisStreamMap",
                                { "Ref": "Stage" },
                                "ReindexStream"
                            ]
                        } ]]}
                    } ]
                },
                "Roles": [
                    { "Ref": "DistributionRole" },
                    { "Ref": "ContentAPIRole" }
                ]
            }
        },
        "StoryPackagesPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "StoryPackagesPolicy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "s3:GetObject",
                            "s3:PutObject",
                            "s3:PutObjectAcl"
                        ],
                        "Resource": "arn:aws:s3:::story-packages-store/*"
                    } ]
                },
                "Roles": [{ "Ref": "DistributionRole" }]
            }
        },
        "StoryPackagesListPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "StoryPackagesListPolicy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "s3:ListBucket"
                        ],
                        "Resource": "arn:aws:s3:::story-packages-store"
                    } ]
                },
                "Roles": [{ "Ref": "DistributionRole" }]
            }
        },
        "DynamoDBPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "DynamoDBPolicy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "dynamodb:GetItem",
                            "dynamodb:Query",
                            "dynamodb:PutItem",
                            "dynamodb:UpdateItem",
                            "dynamodb:DeleteItem",
                            "dynamodb:Scan"
                        ],
                        "Resource": [
                            { "Fn::Join" : [ "", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "DynamoDBTable" } ]]},
                            { "Fn::Join" : [ "", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "ReindexDBTable" } ]]}
                        ]
                    } ]
                },
                "Roles": [{ "Ref": "DistributionRole" }]
            }
        },
        "DynamoDBTable": {
            "Type" : "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [{
                    "AttributeName": "id",
                    "AttributeType": "S"
                }],
                "KeySchema": [{
                    "AttributeName": "id",
                    "KeyType": "HASH"
                }],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": {
                        "Fn::FindInMap": ["StageMap", { "Ref": "Stage" }, "ReadThroughput" ]
                    },
                    "WriteCapacityUnits": {
                        "Fn::FindInMap": ["StageMap", { "Ref": "Stage" }, "WriteThroughput" ]
                    }
                }
            }
        },
        "ReindexDBTable": {
            "Type" : "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [{
                    "AttributeName": "reindexStatus",
                    "AttributeType": "S"
                }, {
                    "AttributeName": "startTime",
                    "AttributeType": "S"
                }],
                "KeySchema": [{
                    "AttributeName": "reindexStatus",
                    "KeyType": "HASH"
                }, {
                    "AttributeName": "startTime",
                    "KeyType": "RANGE"
                }],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": {
                        "Fn::FindInMap": ["StageMap", { "Ref": "Stage" }, "ReindexReadThroughput" ]
                    },
                    "WriteCapacityUnits": {
                        "Fn::FindInMap": ["StageMap", { "Ref": "Stage" }, "ReindexWriteThroughput" ]
                    }
                }
            }
        },
        "DynamoDBDataPipeline": {
            "Type": "AWS::DataPipeline::Pipeline",
            "Properties": {
                "Description": "Back up the story packages database in S3",
                "Name": "StoryPackagesDynamoDBBackup",
                "ParameterObjects": [{
                        "Id": "myOutputS3Loc",
                        "Attributes": [{
                                "Key": "description",
                                "StringValue": "S3 output bucket"
                            }, {
                                "Key": "type",
                                "StringValue": "AWS::S3::ObjectKey"
                            }, {
                                "Key": "default",
                                "StringValue": { "Fn::Join" : [ "", [ "s3://", { "Ref": "S3BackupBucket" } ] ] }
                            }]
                    }, {
                        "Id": "myDDBTableName",
                        "Attributes": [{
                                "Key": "description",
                                "StringValue": "Name of DynamoDB table that requires backup"
                            }, {
                                "Key": "type",
                                "StringValue": "String"
                            }]
                    }, {
                        "Id": "myDDBReadThroughputRatio",
                        "Attributes": [{
                                "Key": "description",
                                "StringValue": "DynamoDB backup read throughput ratio"
                            }, {
                                "Key": "type",
                                "StringValue": "Double"
                            }, {
                                "Key": "default",
                                "StringValue": "0.2"
                            }]
                    }, {
                        "Id": "myStage",
                        "Attributes": [{
                                "Key": "description",
                                "StringValue": "Application stage"
                            }, {
                                "Key": "type",
                                "StringValue": "String"
                            }]
                    }],
                "ParameterValues": [{
                        "Id": "myDDBTableName",
                        "StringValue": { "Ref": "DynamoDBTable" }
                    }, {
                        "Id": "myStage",
                        "StringValue": { "Ref": "Stage" }
                    }],
                "PipelineObjects": [{
                        "Fields": [{
                                "Key": "type",
                                "StringValue": "S3DataNode"
                            }, {
                                "Key": "dataFormat",
                                "RefValue": "DynamoDBExportFormat"
                            }, {
                                "Key": "directoryPath",
                                "StringValue": "#{myOutputS3Loc}/#{myStage}/#{format(@scheduledStartTime, 'YYYY-MM-dd-HH-mm-ss')}"
                            }],
                        "Id": "S3BackupLocation",
                        "Name": "S3 Bucket containing backup dumps"
                    }, {
                        "Fields": [{
                                "Key": "tableName",
                                "StringValue": "#{myDDBTableName}"
                            }, {
                                "Key": "type",
                                "StringValue": "DynamoDBDataNode"
                            }, {
                                "Key": "dataFormat",
                                "RefValue": "DynamoDBExportFormat"
                            }, {
                                "Key": "readThroughputPercent",
                                "StringValue": "#{myDDBReadThroughputRatio}"
                            }],
                        "Id": "DynamoDBSourceTable",
                        "Name": "DynamoDB table that needs backup"
                    }, {
                        "Fields": [{
                                "Key": "type",
                                "StringValue": "DynamoDBExportDataFormat"
                            }],
                        "Id": "DynamoDBExportFormat",
                        "Name": "DynamoDB export format"
                    }, {
                        "Fields": [{
                                "Key": "resizeClusterBeforeRunning",
                                "StringValue": "true"
                            }, {
                                "Key": "type",
                                "StringValue": "HiveCopyActivity"
                            }, {
                                "Key": "input",
                                "RefValue": "DynamoDBSourceTable"
                            }, {
                                "Key": "runsOn",
                                "RefValue": "EmrClusterForBackup"
                            }, {
                                "Key": "output",
                                "RefValue": "S3BackupLocation"
                            }],
                        "Id": "TableBackupActivity",
                        "Name": "Table backup activity"
                    }, {
                        "Fields": [{
                                "Key": "period",
                                "StringValue": "1 weeks"
                            }, {
                                "Key": "startAt",
                                "StringValue": "FIRST_ACTIVATION_DATE_TIME"
                            }, {
                                "Key": "type",
                                "StringValue": "Schedule"
                            }],
                        "Id": "DefaultSchedule",
                        "Name": "Backup once a week"
                    }, {
                        "Fields": [{
                                "Key": "type",
                                "StringValue": "Default"
                            }, {
                                "Key": "scheduleType",
                                "StringValue": "cron"
                            }, {
                                "Key": "failureAndRerunMode",
                                "StringValue": "CASCADE"
                            }, {
                                "Key": "pipelineLogUri",
                                "StringValue": "s3://story-packages-backup/logs"
                            }, {
                                "Key": "role",
                                "StringValue": "DataPipelineDefaultRole"
                            }, {
                                "Key": "resourceRole",
                                "StringValue": "DataPipelineDefaultResourceRole"
                            }, {
                                "Key": "schedule",
                                "RefValue": "DefaultSchedule"
                            }],
                        "Id": "Default",
                        "Name": "Default"
                    }, {
                        "Fields": [{
                                "Key": "terminateAfter",
                                "StringValue": "2 hours"
                            }, {
                                "Key": "releaseLabel",
                                "StringValue": "emr-4.1.0"
                            }, {
                                "Key": "masterInstanceType",
                                "StringValue": "m1.medium"
                            }, {
                                "Key": "coreInstanceType",
                                "StringValue": "m1.medium"
                            }, {
                                "Key": "coreInstanceCount",
                                "StringValue": "1"
                            }, {
                                "Key": "type",
                                "StringValue": "EmrCluster"
                            }],
                        "Id": "EmrClusterForBackup",
                        "Name": "Emr Cluster instances used for backup"
                    }],
                "PipelineTags": [{
                        "Key": "App",
                        "Value": { "Ref": "ApplicationName" }
                    }, {
                        "Key": "Reason",
                        "Value": "backup"
                    }]
            }
        },
        "SSHSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow SSH access from the office",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "GuardianIP"
                        }
                    }
                ]
            }
        },
        "AppServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Application servers",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 9000,
                        "ToPort": 9000,
                        "CidrIp": { "Ref": "GuardianIP" }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 9000,
                        "ToPort": 9000,
                        "SourceSecurityGroupName": {
                            "Fn::GetAtt": [
                                "ApplicationLoadBalancer",
                                "SourceSecurityGroup.GroupName"
                            ]
                        }
                    }
                ]
            }
        },
        "LoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Story packages application load balancer",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "ApplicationLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "AvailabilityZones": { "Ref": "AvailabilityZones" },
                "CrossZone": true,
                "SecurityGroups": [
                    {
                        "Fn::GetAtt": [
                            "LoadBalancerSecurityGroup",
                            "GroupId"
                        ]
                    }
                ],
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "9000",
                        "Protocol": "HTTP"
                    },
                    {
                        "LoadBalancerPort": "443",
                        "InstancePort": "9000",
                        "Protocol": "HTTPS",
                        "InstanceProtocol": "HTTP",
                        "SSLCertificateId": { "Ref": "CertificateArn" }
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:9000/status",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "10",
                    "Interval": "60",
                    "Timeout": "5"
                },
                "Tags": [
                    {
                        "Key": "Stage",
                        "Value": { "Ref": "Stage" }
                    },
                    {
                        "Key": "Stack",
                        "Value": { "Ref": "Stack" }
                    },
                    {
                        "Key": "App",
                        "Value": { "Ref": "ApplicationName" }
                    }
                ]
            }
        },
        "AutoscalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": { "Ref": "AvailabilityZones" },
                "LaunchConfigurationName": {
                    "Ref": "ApplicationLaunchConfig"
                },
                "MinSize": {
                    "Fn::FindInMap": ["StageMap", { "Ref": "Stage" }, "MinSize" ]
                },
                "MaxSize": {
                    "Fn::FindInMap": ["StageMap", { "Ref": "Stage" }, "MaxSize" ]
                },
                "DesiredCapacity": {
                    "Fn::FindInMap": ["StageMap", { "Ref": "Stage" }, "DesiredCapacity" ]
                },
                "Cooldown": "180",
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": 200,
                "LoadBalancerNames": [
                    {
                        "Ref": "ApplicationLoadBalancer"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Stage",
                        "Value": { "Ref": "Stage" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Stack",
                        "Value": { "Ref": "Stack" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "App",
                        "Value": { "Ref": "ApplicationName" },
                        "PropagateAtLaunch": "true"
                    }

                ]
            }
        },
        "KinesisUpdateStream": {
            "Type": "AWS::Kinesis::Stream",
            "Properties": {
                "ShardCount": 1
            }
        },
        "ApplicationLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Authentication": {
                    "distributionAuthentication": {
                        "type": "S3",
                        "roleName": {
                            "Ref": "DistributionRole"
                        },
                        "buckets": [
                            "story-packages-dist"
                        ]
                    }
                },
                "AWS::CloudFormation::Init": {
                    "config": {
                        "users": {
                            "story-packages": {
                                "homeDir": "/home/story-packages"
                            }
                        },
                        "files": {
                            "/home/story-packages/story-packages.all.deb": {
                                "source": { "Fn::Join" : ["", [
                                    "https://s3-eu-west-1.amazonaws.com/story-packages-dist/cms-fronts/",
                                    { "Ref": "Stage" },
                                    "/story-packages/story-packages_1.0.0_all.deb"
                                ]]},
                                "authentication": "distributionAuthentication"
                            },
                            "/etc/gu/story-packages.application.secrets.conf": {
                                "source": { "Fn::Join" : ["", [
                                    "https://s3-eu-west-1.amazonaws.com/facia-private/story-packages.application.secrets.conf"
                                ]]},
                                "mode": "000400",
                                "owner": "story-packages",
                                "authentication": "distributionAuthentication"
                            },
                            "/etc/gu/story-packages.properties": {
                                "content": { "Fn::Join" : ["", [
                                    "STAGE=", { "Ref" : "Stage" }, "\n",
                                    "STREAM=", { "Ref" : "KinesisUpdateStream" }, "\n",
                                    "CAPI_STREAM=", {
                                        "Fn::FindInMap": [
                                            "KinesisStreamMap",
                                            { "Ref": "Stage" },
                                            "CAPIStream"
                                        ]
                                    }, "\n",
                                    "TABLE_CONFIG=", { "Ref" : "DynamoDBTable" }, "\n",
                                    "REINDEX_TABLE=", { "Ref" : "ReindexDBTable" }, "\n",
                                    "REINDEX_STREAM=", {
                                        "Fn::FindInMap": [
                                            "KinesisStreamMap",
                                            { "Ref": "Stage" },
                                            "ReindexStream"
                                        ]
                                    }, "\n"
                                ]]}
                            }
                        }
                    }
                }
            },
            "Properties": {
                "KeyName": "fronts",
                "ImageId": { "Ref": "MachineImageID" },
                "InstanceType": {
                    "Fn::FindInMap": [
                        "StageMap",
                        { "Ref": "Stage" },
                        "InstanceType"
                    ]
                },
                "SecurityGroups": [
                    { "Ref": "AppServerSecurityGroup" },
                    { "Ref": "SSHSecurityGroup" }
                ],
                "IamInstanceProfile": {
                    "Ref": "DistributionInstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -ev\n",
                                "cfn-init -s ",
                                { "Ref": "AWS::StackId" },
                                " -r ApplicationLaunchConfig ",
                                "  --region ",
                                { "Ref": "AWS::Region" },
                                " || error_exit 'Failed to run cfn-init'\n",

                                "dpkg -i /home/story-packages/story-packages.all.deb"
                            ]
                        ]
                    }
                }
            }
        }
    },
    "Outputs": {
        "ApplicationLoadBalancerDNS": {
            "Description": "Load balancer DNS",
            "Value": {
                "Fn::GetAtt": [
                    "ApplicationLoadBalancer",
                    "DNSName"
                ]
            }
        },
        "UpdateStream": {
            "Description": "Kinesis stream with stream updates",
            "Value": {
                "Ref": "KinesisUpdateStream"
            }
        },
        "DynamoTable": {
            "Description": "Table name of DynamoDB",
            "Value": {
                "Ref": "DynamoDBTable"
            }
        },
        "ReindexTable": {
            "Description": "Table name of DynamoDB reindex jobs",
            "Value": {
                "Ref": "ReindexDBTable"
            }
        }
    }
}
